#include "mbed.h"
#include "coefficients.hpp"
#include <chrono>
#include <cstdio>
#include <cstdint>
#include <iostream>
#include <math.h>
#include <cmath>
#include <iterator>
#include "mbed_events.h"
#include "SDBlockDevice.h"
#include "FATFileSystem.h"

using namespace std;

/*
EventQueue mainQueue;
EventQueue dftQueue;

Thread dft;

void dftTask() {
    dftQueue.dispatch_forever();
}

//Pi
const double pi = 3.14159265359;
volatile int n = 0;

double Xkreal = 0.0;
double Xkimag = 0.0;
double xntempreal = 0.0;
double xntempimag = 0.0;
double zero = 0.0;

//List of variables used for DFT.
double powerResult = 0;
double mag = 0;
double realComp;
double imagComp;
float freq=0;

//Array used to save the results and frequency.
double resultArray[2][31];

//Timer to time how long the DFT takes.
Timer tmr;

//Mock input data - randomly made.
double xInp[200]={
   //0.631188734269011,0.355073651878849,0.997003271606648,0.224171498983127,0.652451072968615,0.604990641908259,0.387245431483135,0.142187159290504,0.0251349857102031,0.421112253765241,0.184100289427511,0.725775267469453,0.370362686515198,0.841560087468206,0.734229691193313,0.571025872824379,0.176855057625303,0.957384022595723,0.26532203619292,0.924580895239601,0.223770404697041,0.373563807642645,0.0875003495765857,0.640116548246715,0.180616887753108,0.0450511074735742,0.723173479183095,0.34743764558179,0.660616824502904,0.383868601071971,0.627346502443467,0.0216498146303065,0.910569988523029,0.800558656278811,0.745847484342721,0.813112813610761,0.383306318625529,0.617279232316449,0.575494859702814,0.530051704765016,0.275069755821935,0.24862895966197,0.451638770451973,0.227712826026548,0.80444958361307,0.98610424189597,0.0299919502693899,0.535664190667238,0.0870772199008923,0.802091440555804,0.98914490970034,0.0669462583977501,0.939398361884535,0.0181775336366957,0.683838613746355,0.783736480083219,0.534137567882728,0.885359450931142,0.89900489890614,0.625937626080496,0.137868992412558,0.217801593712125,0.182141075890434,0.0418198639729543,0.106941658550207,0.616443485085685,0.939661010161067,0.354455730967329,0.410629090059514,0.984349416984452,0.945579189035263,0.676644678433539,0.988302262313286,0.766831387216594,0.336699264391476,0.662381860399481,0.244165286790279,0.295507250831597,0.680178371230502,0.527846830418798,0.411593513407535,0.602638218036397,0.750520055923736,0.583533174261959,0.551792514935967,0.583570618757714,0.511819919958475,0.0825927269986994,0.71957013485949,0.996156111296869,0.354534304956922,0.971258815183406,0.34644876130036,0.886543861760306,0.454694864991908,0.413427289020815,0.2177320683573,0.125654587362626,0.308914593566815,0.726104431664832,0.782872072979123,0.693787614986897,0.00980225226306208,0.84321333801051,0.922331997796276,0.770954220673924,0.0426598559350487,0.378186137050219,0.704339624483368,0.729513045504647,0.224277070664514,0.269054731773365,0.673031165004119,0.477492197726861,0.623716412667442,0.23644493264091,0.177123754498317,0.829643385697585,0.766921667935265,0.93447827311827,0.107888905084364,0.182227505601056,0.0990952824224585,0.489763801923447,0.19324533046887,0.895891573792568,0.0990896496818146,0.0441655717626611,0.557295155804762,0.772495067187624,0.311940057496269,0.178982479314335,0.338955678247718,0.210145637043552,0.51015251976525,0.906364323265215,0.628923938652318,0.101533888812312,0.390854752726355,0.0546166152236576,0.501282913203215,0.431721171884247,0.997560349512189,0.811602580995323,0.485651669898018,0.894447755567393,0.137546594767065,0.390004914445285,0.927356224998125,0.917493832416117,0.713574011594316,0.61833738362194,0.343287890241345,0.93602732668977,0.124774040660493,0.730585361505707,0.646477432425814,0.833151985669295,0.398282228218775,0.749822209360636,0.835220510478131,0.322460397362259,0.552261616858355,0.979129132433892,0.549308533018303,0.330423609606603,0.61947155517778,0.360636571002203,0.756509543501944,0.41390074869019,0.492345104384938,0.69474323313261,0.972733885079784,0.327754960493407,0.837803183078576,0.739072227273528,0.954174456379543,0.0319226295039784,0.356868986182542,0.662653834287214,0.281501559148491,0.230383067317464,0.711128551180325,0.624572916993309,0.590608652919636,0.660437966312602,0.0475546731138661,0.348784808510059,0.451340580355743,0.240904997120111,0.715045013296177,0.856182292006288,0.281507695118553,0.731050829723741,0.137762892519516,0.836722781749717,0.13860171574236,0.588209385389494,0.366156800454938,0.806759544661106
1.5847,
2.8872,
3.6805,
3.8362,
3.3479,
2.3287,
0.98544,
-0.42552,
-1.6509,
-2.4899,
-2.83,
-2.6631,
-2.0784,
-1.2362,
-0.32771,
0.46709,
1.0166,
1.2601,
1.2125,
0.95106,
0.5896,
0.2459,
0.011812,
-0.0674,
-4.577e-17,
0.15986,
0.33137,
0.4323,
0.4032,
0.22451,
-0.07789,
-0.43964,
-0.77509,
-1.0001,
-1.0543,
-0.91661,
-0.61125,
-0.20114,
0.22774,
0.58779,
0.81103,
0.86484,
0.75818,
0.53696,
0.27018,
0.03049,
-0.12525,
-0.17058,
-0.11508,
5.0841e-15,
0.11508,
0.17058,
0.12525,
-0.03049,
-0.27018,
-0.53696,
-0.75818,
-0.86484,
-0.81103,
-0.58779,
-0.22774,
0.20114,
0.61125,
0.91661,
1.0543,
1.0001,
0.77509,
0.43964,
0.07789,
-0.22451,
-0.4032,
-0.4323,
-0.33137,
-0.15986,
-3.5935e-16,
0.0674,
-0.011812,
-0.2459,
-0.5896,
-0.95106,
-1.2125,
-1.2601,
-1.0166,
-0.46709,
0.32771,
1.2362,
2.0784,
2.6631,
2.83,
2.4899,
1.6509,
0.42552,
-0.98544,
-2.3287,
-3.3479,
-3.8362,
-3.6805,
-2.8872,
-1.5847,
-1.7026e-14,
1.5847,
2.8872,
3.6805,
3.8362,
3.3479,
2.3287,
0.98544,
-0.42552,
-1.6509,
-2.4899,
-2.83,
-2.6631,
-2.0784,
-1.2362,
-0.32771,
0.46709,
1.0166,
1.2601,
1.2125,
0.95106,
0.5896,
0.2459,
0.011812,
-0.0674,
-4.2257e-15,
0.15986,
0.33137,
0.4323,
0.4032,
0.22451,
-0.07789,
-0.43964,
-0.77509,
-1.0001,
-1.0543,
-0.91661,
-0.61125,
-0.20114,
0.22774,
0.58779,
0.81103,
0.86484,
0.75818,
0.53696,
0.27018,
0.03049,
-0.12525,
-0.17058,
-0.11508,
-7.3479e-16,
0.11508,
0.17058,
0.12525,
-0.03049,
-0.27018,
-0.53696,
-0.75818,
-0.86484,
-0.81103,
-0.58779,
-0.22774,
0.20114,
0.61125,
0.91661,
1.0543,
1.0001,
0.77509,
0.43964,
0.07789,
-0.22451,
-0.4032,
-0.4323,
-0.33137,
-0.15986,
-1.8528e-14,
0.0674,
-0.011812,
-0.2459,
-0.5896,
-0.95106,
-1.2125,
-1.2601,
-1.0166,
-0.46709,
0.32771,
1.2362,
2.0784,
2.6631,
2.83,
2.4899,
1.6509,
0.42552,
-0.98544,
-2.3287,
-3.3479,
-3.8362,
-3.6805,
-2.8872,
-1.5847,
-3.4053e-14,
};
double xn = xInp[n];
void read() {
xn = xInp[n];
}

void process() {
    //k (freq bin value)
    volatile int k = 0;
    
    //Curent cycle term
    //volatile int n = 0;

    //Constant to durtimine how many cycles
    const volatile int N = 200;

    //Start of DFT while (loops 29 times)
    while (k<31) {

        //Cycle while loop - loops 200 times multiply 29.
        while (n<N-1) {
            
            //Assinging an input value from the array to a temp input value
            //double xn = xInp[n];

            //DFT calcaultion - Coeffs contained in header file
            xntempreal = xn*cosCoeff[k][n];
            xntempimag = xn*sineCoeff[k][n];

            //Sumation of DFT cals
            Xkreal = Xkreal + xntempreal;
            Xkimag = Xkimag + xntempimag;

            //Adds to n for next cycle
            n++;
        }

        //Absolute of real and imag components
        realComp = abs(Xkreal);
        imagComp = abs(Xkimag);

        //Squares the real and imag component and adds them to powerResult
        powerResult = (realComp*realComp) + (imagComp*imagComp);
        
        //Saving result of the power to the result array
        resultArray[0][k] = powerResult;

        //Finding the current frequency
        freq = (k*(100.0/N));

        //Saving freq result to the result array
        resultArray[1][k] = freq;

        //Setting Xk to zero for next k cycle
        //Xk = zero;
        Xkreal = 0.0;
        Xkimag = 0.0;

        //Setting n to 0 for next k cycle
        n = 0;

        //Adding 1 to k
        k++;    
    }
    
    //Print the DFT power results and frequencies
    for (int i = 0; i<31; i++) {
        printf("Power: %f | Freq: %f\n", resultArray[0][i], resultArray[1][i]);
    }
}
*/
int main()
{
/*

    dft.start(dftTask);

    dftQueue.call_every(1s, callback(read, &xn));

    mainQueue.dispatch_forever();
    
    while (true) {
    LED = 1;
    wait_us(500);
    LED = 0;
    wait_us(500);
    //cout << "Done" << endl;
    }
    */
    DigitalOut PWM(PA_8);
    DigitalOut ILED(PA_0, 1);
    //AnalogIn PDAC(PC_1);
    //AnalogIn PDDC(PC_0);

    /*
    printf("Start!\n");
    LED = 1;
    int n = 0;
    unsigned short PDTotalDC = 0;
    unsigned short PDTotalAC = 0;
    int32_t ACValue = 0;

    while (true) {
        
        PDTotalDC = PDDC.read_u16();
        PDTotalAC = PDAC.read_u16();

        if (PDTotalAC > 32768) {
            ACValue = PDTotalAC - 32768;
        }
        else if (PDTotalAC < 32768) {
            ACValue = (PDTotalAC - 32768)*-1;
        }
        else {
            ACValue = 0;
        }

        printf("DC Value: %hu\n", PDTotalDC);
        printf("AC Value: %i\n\n", ACValue);
        wait_us(1000000);
    }
    */

    while (true) {
        PWM = 0;
        wait_us(500);

        PWM = 1;
        wait_us(500);
    } 


}



//Code for testing board currently
    /*

    */


