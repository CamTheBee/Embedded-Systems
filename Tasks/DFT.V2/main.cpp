#include "mbed.h"
#include "uop_msb.h"
#include "coeffs.hpp"
#include "ComplexNumber.hpp"
#include <chrono>
#include <cstdio>
#include <iostream>
#include <math.h>
#include <cmath>
using namespace std;

//Pi
double pi = 3.14159265359;

//Arguements using ComplexNumber class --- This is no longer needed so can review need of complex number class if needed. ---
ComplexNumber Xk(0.0,0.0);
ComplexNumber xntemp(0.0,0.0);
ComplexNumber zero(0.0,0.0);

//List of variables used for DFT.
double powerResult = 0;
double mag = 0;
double realComp;
double imagComp;
float freq=0;

//Array used to save the results and frequency.
double resultArray[2][29];

//Timer to time how long the DFT takes.
Timer tmr;

//Mock input data - randomly made.
double xInp[200]={
    0.631188734269011,0.355073651878849,0.997003271606648,0.224171498983127,0.652451072968615,0.604990641908259,0.387245431483135,0.142187159290504,0.0251349857102031,0.421112253765241,0.184100289427511,0.725775267469453,0.370362686515198,0.841560087468206,0.734229691193313,0.571025872824379,0.176855057625303,0.957384022595723,0.26532203619292,0.924580895239601,0.223770404697041,0.373563807642645,0.0875003495765857,0.640116548246715,0.180616887753108,0.0450511074735742,0.723173479183095,0.34743764558179,0.660616824502904,0.383868601071971,0.627346502443467,0.0216498146303065,0.910569988523029,0.800558656278811,0.745847484342721,0.813112813610761,0.383306318625529,0.617279232316449,0.575494859702814,0.530051704765016,0.275069755821935,0.24862895966197,0.451638770451973,0.227712826026548,0.80444958361307,0.98610424189597,0.0299919502693899,0.535664190667238,0.0870772199008923,0.802091440555804,0.98914490970034,0.0669462583977501,0.939398361884535,0.0181775336366957,0.683838613746355,0.783736480083219,0.534137567882728,0.885359450931142,0.89900489890614,0.625937626080496,0.137868992412558,0.217801593712125,0.182141075890434,0.0418198639729543,0.106941658550207,0.616443485085685,0.939661010161067,0.354455730967329,0.410629090059514,0.984349416984452,0.945579189035263,0.676644678433539,0.988302262313286,0.766831387216594,0.336699264391476,0.662381860399481,0.244165286790279,0.295507250831597,0.680178371230502,0.527846830418798,0.411593513407535,0.602638218036397,0.750520055923736,0.583533174261959,0.551792514935967,0.583570618757714,0.511819919958475,0.0825927269986994,0.71957013485949,0.996156111296869,0.354534304956922,0.971258815183406,0.34644876130036,0.886543861760306,0.454694864991908,0.413427289020815,0.2177320683573,0.125654587362626,0.308914593566815,0.726104431664832,0.782872072979123,0.693787614986897,0.00980225226306208,0.84321333801051,0.922331997796276,0.770954220673924,0.0426598559350487,0.378186137050219,0.704339624483368,0.729513045504647,0.224277070664514,0.269054731773365,0.673031165004119,0.477492197726861,0.623716412667442,0.23644493264091,0.177123754498317,0.829643385697585,0.766921667935265,0.93447827311827,0.107888905084364,0.182227505601056,0.0990952824224585,0.489763801923447,0.19324533046887,0.895891573792568,0.0990896496818146,0.0441655717626611,0.557295155804762,0.772495067187624,0.311940057496269,0.178982479314335,0.338955678247718,0.210145637043552,0.51015251976525,0.906364323265215,0.628923938652318,0.101533888812312,0.390854752726355,0.0546166152236576,0.501282913203215,0.431721171884247,0.997560349512189,0.811602580995323,0.485651669898018,0.894447755567393,0.137546594767065,0.390004914445285,0.927356224998125,0.917493832416117,0.713574011594316,0.61833738362194,0.343287890241345,0.93602732668977,0.124774040660493,0.730585361505707,0.646477432425814,0.833151985669295,0.398282228218775,0.749822209360636,0.835220510478131,0.322460397362259,0.552261616858355,0.979129132433892,0.549308533018303,0.330423609606603,0.61947155517778,0.360636571002203,0.756509543501944,0.41390074869019,0.492345104384938,0.69474323313261,0.972733885079784,0.327754960493407,0.837803183078576,0.739072227273528,0.954174456379543,0.0319226295039784,0.356868986182542,0.662653834287214,0.281501559148491,0.230383067317464,0.711128551180325,0.624572916993309,0.590608652919636,0.660437966312602,0.0475546731138661,0.348784808510059,0.451340580355743,0.240904997120111,0.715045013296177,0.856182292006288,0.281507695118553,0.731050829723741,0.137762892519516,0.836722781749717,0.13860171574236,0.588209385389494,0.366156800454938,0.806759544661106
};


int main()
{
    //k (freq bin value)
    volatile int k = 4;
    
    //Curent cycle term
    volatile int n = 0;

    //Constant to durtimine how many cycles
    const volatile int N = 200;

    //Starting timer to test how long DFT takes
    tmr.start();

    //Start of DFT while (loops 29 times)
    while (k<33) {

        //Cycle while loop - loops 200 times multiply 29.
        while (n<N-1) {
            
            //Assinging an input value from the array to a temp input value
            double xn = xInp[n];

            //DFT calcaultion - Coeffs contained in header file
            ComplexNumber xntemp((xn*cosCoeff[k-4][n]),(xn*sineCoeff[k-4][n]));

            //Sumation of DFT cals
            Xk = Xk.addedTo(xntemp);

            //Adds to n for next cycle
            n++;
        }

        //Uncomment either version 1 or version 2
        ////////////////////////////////////////////////////////////////////
        //Version 1:
        /*
        //Absolute of real and imag components
        realComp = abs(Xk.getReal());
        imagComp = abs(Xk.getImag());

        //Squares the real and imag component and adds them to powerResult
        powerResult = (realComp*realComp) + (imagComp*imagComp);
        */
        ////////////////////////////////////////////////////////////////////
        //Version 2
        /*
        //Gets real and imag components
        realComp = Xk.getReal();
        imagComp = Xk.getImag();

        //Could save time here and just save the real and imag components squared to powerResult as done in version 1.
        //Finds the mag of the real and imag components
        mag = sqrt((realComp*realComp) + (imagComp*imagComp));

        //Squares the mag and saves it to powerResult
        powerResult = mag*mag;        
        */      
        ////////////////////////////////////////////////////////////////////


        //Saving result of the power to the result array
        resultArray[0][k-4] = powerResult;

        //Finding the current frequency
        freq = (k*(100.0/N));

        //Saving freq result to the result array
        resultArray[1][k-4] = freq;

        //Setting Xk to zero for next k cycle
        Xk = zero;

        //Setting n to 0 for next k cycle
        n = 0;

        //Adding 1 to k
        k++;
        
    }

    //Stop timer
    tmr.stop();
    
    //Print how long it took for the DFT to work
    printf("Time taken: %llu milliseconds\n", duration_cast<milliseconds>(tmr.elapsed_time()).count());
    
    //Print the DFT power results and frequencies
    for (int i = 0; i<29; i++) {
        printf("Power: %f | Freq: %f\n", resultArray[0][i], resultArray[1][i]);
    }

    //While true to not break main once the DFT has finished
    while (true){
    }
    }




